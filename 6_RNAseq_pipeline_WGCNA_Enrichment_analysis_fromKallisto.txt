#loading the WGCNA=====================================================================================
# Load the WGCNA package
install.packages("BiocManager", repos = "https://cloud.r-project.org")
BiocManager::install("WGCNA", force = TRUE) 
library(WGCNA);

BiocManager::install("ggplot2") 
library(ggplot2)

# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
       
#load the data######

#normalised data#######
#### try with normalised data as https://bioinformaticsworkbook.org/tutorials/wgcna.html#gsc.tab=0

{
  BiocManager::install("DESeq2") 
  library(DESeq2)
  
    setwd("/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/Analyses_DE/Kallisto/NewKallisto2021/Kallisto_V4_2021/Analyses2022")
  load("male.gene.V4.Kal.woL4_8_14_29.filtered.RData") 
  load("male.info_woL4_8_14_29.RData")
  
  
  #visualising the count of each samples
  male.info_woL4_8_14_29$V126I <- as.factor(male.info_woL4_8_14_29$V126I) 
  male.info_woL4_8_14_29$color <- as.factor(male.info_woL4_8_14_29$color)
  male.info_woL4_8_14_29$cPoiYA <- as.factor(male.info_woL4_8_14_29$cPoiYA)
  
  dds <- DESeqDataSetFromMatrix(countData = as.matrix(male.gene.V4.Kal.woL4_8_14_29.filtered), colData = male.info_woL4_8_14_29, design = ~ V126I + color)
  colData(dds) 
  
   #get log2 counts that will normalized the variation in the counts see below
  vsd <- vst(dds,blind=TRUE)
  setwd("/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/Analyses_DE/Kallisto/NewKallisto2021/Kallisto_V4_2021/Analyses2022")
 
  datExprnorm = as.data.frame(t(assay(vsd)), options(stringsAsFactors = FALSE))
  
  row.names(datExprnorm)<-male.info_woL4_8_14_29$Libraries
 sampleTree = hclust(dist(datExprnorm), method = "average");
  # Plot the sample tree: Open a graphic output window of size 12 by 9 inches
  # The user should change the dimensions if the window is too large or too small.
  sizeGrWindow(12,9)
  #pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
  par(cex = 0.6);
  par(mar = c(0,4,2,0))
  plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, 
       cex.axis = 1.5, cex.main = 2)
  
}#Lib 26 a bit out, should be remove? yes

#remove Lib26=====================================================================================

# Plot a line to show the cut
abline(h = 80, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 80, minSize = 10)
#table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExprnormwoL26 = datExprnorm[keepSamples, ]
nGenes = ncol(datExprnormwoL26)
nSamples = nrow(datExprnormwoL26)
dim(datExprnormwoL26) #32 16855

##removeLib26### WITH NORMALISATION it is sample Lib26 that is out
#check the smaples
gsg = goodSamplesGenes(datExprnormwoL26, verbose = 3);

gsg$allOK
#[1]TRUE

#load trait data=====================================================================================

setwd("/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/Analyses_DE/Kallisto/NewKallisto2021/Kallisto_V4_2021/Analyses2022")
load("male.info_woL4_8_14_29.RData")

View( male.info_woL4_8_14_29)
dim(male.info_woL4_8_14_29) #33 66
names(male.info_woL4_8_14_29)

# remove columns that hold information we do not need.
allTraitsmwoL26<-male.info_woL4_8_14_29[-18,c(12,3)]
 
dim(allTraitsmwoL26) #32 2
names(allTraitsmwoL26)
#"V126I"     "Libraries"     

allTraitsmwoL26$V126I<-as.numeric(as.factor(allTraitsmwoL26$V126I))
datTraits<-allTraitsmwoL26$Libraries; datTraits
datTraits<-as.vector(datTraits)

allTraitsmwoL26$Libraries<-as.numeric(as.factor(allTraitsmwoL26$Libraries)); allTraitsmwoL26$Libraries

#sample visualisation_dendogramLib_traits=====================================================================================
#Before we continue with network construction and module detection, we visualize how the clinical traits relate to the sample dendrogram.
# Re-cluster samples
sampleTree2 = hclust(dist(datExprnormwoL26), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(allTraitsmwoL26, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
                    groupLabels = names(allTraitsmwoL26),
                    main = "Sample dendrogram and trait heatmap")
setwd("/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/")

save(datExprnormwoL26, allTraitsmwoL26, file = "clustermc1rmalenormwoL26_MC1R.RData")

#build the module tree=====================================================================================
##load the data#####

# Load the data saved in the first part
lnames = load(file = "clustermc1rmalenormwoL26_MC1R.RData");
#The variable lnames contains the names of loaded variables.
lnames
#[1] "datExprnormwoL26" "allTraitsmwoL26"
str(allTraitsmwoL26)

##find the power######

allowWGCNAThreads()          # allow multi-threading (optional)
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExprnormwoL26, powerVector = powers, verbose = 5)
#pickSoftThreshold: will use block size 2654.
#pickSoftThreshold: calculating connectivity for given powers...
#..working on genes 1 through 2654 of 16855
#..working on genes 2655 through 5308 of 16855
#..working on genes 5309 through 7962 of 16855
#..working on genes 7963 through 10616 of 16855
#..working on genes 10617 through 13270 of 16855
#..working on genes 13271 through 15924 of 16855
#..working on genes 15925 through 16855 of 16855
#Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.
#Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k.
#1      1  0.00931 -0.0877          0.581  4310.0  4090.000   7270
#2      2  0.82900 -0.8090          0.883  1750.0  1440.000   4430
#3      3  0.90900 -1.0000          0.913   898.0   599.000   3110
#4      4  0.91000 -1.0800          0.912   530.0   278.000   2350
#5      5  0.90700 -1.1200          0.911   342.0   138.000   1860
#6      6  0.89800 -1.1400          0.910   236.0    73.200   1520
#7      7  0.88300 -1.1700          0.904   170.0    40.400   1270
#8      8  0.87300 -1.1800          0.902   127.0    23.300   1080
#9      9  0.85700 -1.2000          0.896    97.4    13.800    932
#10    10  0.84300 -1.2200          0.891    76.4     8.430    812
#11    12  0.80700 -1.2600          0.871    49.5     3.360    632
#12    14  0.79300 -1.3000          0.870    33.7     1.440    505
#13    16  0.80100 -1.3000          0.888    23.9     0.660    412
#14    18  0.78700 -1.3400          0.885    17.5     0.319    341
#15    20  0.78200 -1.3600          0.887    13.1     0.158    286

# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     ylim=c(000,5000),
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
abline(h=100,col="red")
#it looks like 3 to 5 is sufficient, but from the number of data I should pick up something between 
##module step by step=====================================================================================
{#set the power depending on the horizontal line, try 3 should choose the lowest power as possible (SIB)
  #however for more than 30 samples it should be 7 for unsigned and 14 for signed faq wgcna, thus take 5 which is at the inflexion points
  
  softPower = 7;
  adjacency = adjacency(datExprnormwoL26, power = softPower);
  
  # Turn adjacency into topological overlap
  TOM = TOMsimilarity(adjacency);
  dissTOM = 1-TOM
  
  # Clustering all the hierarchical clustering function
  geneTree = hclust(as.dist(dissTOM), method = "average");
  # Plot the resulting clustering tree (dendrogram)
  sizeGrWindow(12,9)
  plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
       labels = FALSE, hang = 0.04);
  #In the clustering tree (dendrogram), each leaf, that is a short vertical line, corresponds to a gene. Branches of the dendrogram group together densely interconnected, highly co-expressed genes. Module identification amounts to the identification of individual branches (”cutting the branches off the dendrogram”). 
  
  # We like large modules, so we set the minimum module size relatively high:
  minModuleSize = 25;
  # Module identification using dynamic tree cut:
  dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
                              deepSplit = 2, pamRespectsDendro = FALSE,
                              minClusterSize = minModuleSize);
  # ..cutHeight not given, setting it to 0.993  ===>  99% of the (truncated) height range in dendro.
  #..done.
  genetomodule<-cbind(dynamicMods,colnames(datExprnormwoL26))
  
  write.table(genetomodule,
              file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/for_publi/gene_moduleswoL26power7_stepbystepbeforcut.txt")
  #mod22=DEgenes, except Calb1
  table(dynamicMods)
  #dynamicMods
  
  #0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 
  #314 4481 2538 1809 1472  858  582  451  423  327  294  258  253  252  214  203  202  194  181  175 
  #20   21   22   23   24   25   26   27   28   29   30   31   32   33 
  #172  153  148  140  135  131   95   86   85   67   46   41   38   37 
  #Label 0 is reserved for unassigned genes
  
  # Convert numeric lables into colors
  dynamicColors = labels2colors(dynamicMods)
  table(dynamicColors)
  #dynamicColors
  
  #black           blue          brown           cyan      darkgreen       darkgrey 
 # 451           2538           1809            214            148            135 
 # darkolivegreen     darkorange        darkred  skyblue          green    greenyellow 
 # 37             95            153            140            858            258 
 # grey         grey60      lightcyan     lightgreen    lightyellow        magenta 
 # 314            194            202            181            175            327 
  #midnightblue         orange  paleturquoise           grey60         purple            red 
  #203            131             41            423            294            582 
  #royalblue    saddlebrown         salmon        skyblue      steelblue            tan 
  #172             67            252             85             46            253 
  #turquoise         violet          white         yellow 
  #4481             38             86           1472  
 
   # Plot the dendrogram and colors underneath
  sizeGrWindow(8,6)
  plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
                      dendroLabels = FALSE, hang = 0.03,
                      addGuide = TRUE, guideHang = 0.05,
                      main = "Gene dendrogram and module colors")
  
  #merging cluster
  # Calculate eigengenes
  MEList = moduleEigengenes(datExprnormwoL26, colors = dynamicColors)
  MEList
  #$validColors
  MEs = MEList$eigengenes
  # Calculate dissimilarity of module eigengenes
  MEDiss = 1-cor(MEs);
  # Cluster module eigengenes
  METree = hclust(as.dist(MEDiss), method = "average");
  # Plot the result
  sizeGrWindow(7, 6)
  plot(METree, main = "Clustering of module eigengenes",
       xlab = "", sub = "")
  
  #merging at 0.25 correspond to a correlation of 0.75
  MEDissThres = 0.15
  # Plot the cut line into the dendrogram
  abline(h=MEDissThres, col = "red")
  # Call an automatic merging function
  merge = mergeCloseModules(datExprnormwoL26, dynamicColors, cutHeight = MEDissThres, verbose = 3)
  
  
  # The merged module colors
  mergedColors = merge$colors;
  # Eigengenes of the new merged modules:
  mergedMEs = merge$newMEs;
  
  sizeGrWindow(12, 9)
  #pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
  plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
                      c("Dynamic Tree Cut", "Merged dynamic"),
                      dendroLabels = FALSE, hang = 0.03,
                      addGuide = TRUE, guideHang = 0.05)
  #dev.off()
  
  
  # Rename to moduleColors
  moduleColors = mergedColors
  # Construct numerical labels corresponding to the colors
  colorOrder = c("grey", standardColors(50));
  moduleLabels = match(moduleColors, colorOrder)-1;
  MEs = mergedMEs;
  # Save module colors and labels for use in subsequent parts
  setwd("/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/for_publi")
  save(MEs, moduleLabels, moduleColors, geneTree, file = "clustermc2rmale_unsignednormalisedwoL26MC1RstepBySteppower7.RData")
  
  
  # Load the expression and trait data saved in the first part
  lnames = load(file = "clustermc1rmalenormwoL26_MC1R.RData");
  #The variable lnames contains the names of loaded variables.
  lnames
  # Load network data saved in the second part.
  lnames = load(file = "clustermc2rmale_unsignednormalisedwoL26MC1RstepBySteppower7.RData");
  lnames
  #[1] "MEs"          "moduleLabels" "moduleColors" "geneTree"   
  
 
  # Define numbers of genes and samples
  nGenes = ncol(datExprnormwoL26);
  nSamples = nrow(datExprnormwoL26);
  # Recalculate MEs with color labels
  MEs0 = moduleEigengenes(datExprnormwoL26, moduleColors)$eigengenes
  MEs = orderMEs(MEs0)
  MC1R<-as.numeric(as.factor(allTraitsmwoL26$V126I))
  moduleTraitCor = cor(MEs, MC1R, use = "p");moduleTraitCor
  moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
  #                        [,1]
  #MElightcyan      -0.02340966
  #MEsteelblue      -0.08939081
  MEviolet         -0.13186300
  MEbrown          -0.15473147
  MEmidnightblue   -0.19033535
  MEroyalblue      -0.08203473
  MEtan             0.04520994
  MEsaddlebrown     0.09967833
  MEblue            0.24676320
  MEgrey60          0.18436367
  MEwhite           0.20261698
  MElightyellow     0.11782060
  MEblack           0.25391138
  MEpink            0.15191735
  MEpaleturquoise   0.07493704
  MEdarkgreen      -0.01514540
  MEcyan           -0.15422285
  MEskyblue        -0.55519118
  MEdarkolivegreen -0.42478773
  MEdarkorange     -0.14141664
  MEdarkred        -0.07679746
  MEorange          0.08065243
  MEmagenta        -0.13597424
  MEturquoise       0.06901136
  MEdarkturquoise  -0.04872495
  MElightgreen     -0.06667832
  MEgrey           -0.10921269
  
  sizeGrWindow(10,6)
  # Will display correlations and their p-values
  textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
                     signif(moduleTraitPvalue, 1), ")", sep = "");
  dim(textMatrix) = dim(moduleTraitCor)
  par(mar = c(6, 8.5, 3, 3));
  
 # library(scales)
 # show_col(viridis_pal()(20))
  library(RColorBrewer)
  display.brewer.all()
  library(ggplot2)
  
  BiocManager::install("repr", force = TRUE) 
  library(repr)
  
  # Display the correlation values within a heatmap plot
  labeledHeatmap(Matrix = moduleTraitCor,
                 xLabels = "MC1R",
                 yLabels = names(MEs),
                 ySymbols = names(MEs),
                 colorLabels = FALSE,
                 #colors = greenWhiteRed(50),
                 colors = heat.colors(25),
                # colors=rainbow(50),
                 textMatrix = textMatrix,
                 setStdMargins = FALSE,
                 cex.text = 0.3,
                 zlim = c(-1,1),
                #options(repr.plot.width = 5))
  theme(plot.margin = margin(t = 1,  # Top margin
                             r = 10,  # Right margin
                             b = 1,  # Bottom margin
                             l = 10, "cm"))) # Left margin
 # theme(plot.margin = unit(c(3, 3, 3, 3), "cm"))
  
                 #main = paste("Module-MC1R relationships"))
  
  # Define variable weight containing the weight column of datTrait
  names(MC1R) = "MC1R"
  # names (colors) of the modules
  modNames = substring(names(MEs), 3)
  geneModuleMembership = as.data.frame(cor(datExprnormwoL26, MEs, use = "p"));
   write.table(geneModuleMembership, file="/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/WGCNA_figure_table_2024/geneModuleMembership.txt", row.names=TRUE, col.names=TRUE)
  MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
  
  names(geneModuleMembership) = paste("MM", modNames, sep="");
  names(MMPvalue) = paste("p.MM", modNames, sep="");
  geneTraitSignificance = as.data.frame(cor(datExprnormwoL26, allTraitsmwoL26$V126I, use = "p"));
  write.table(geneTraitSignificance, file="/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/WGCNA_figure_table_2024/geneTraitSignificance.txt", row.names=TRUE, col.names=TRUE)
  
   GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
  names(geneTraitSignificance) = paste("GS.", "MC1R", sep="");
  names(GSPvalue) = paste("p.GS.", "MC1R", sep="");
   GSPvalue
   write.table(GSPvalue, file="/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/WGCNA_figure_table_2024/GSPvalue.txt", row.names=TRUE, col.names=TRUE)
   
  module = "skyblue"
  column = match(module, modNames);
  moduleGenes = moduleColors==module;
  sizeGrWindow(7, 7);
  par(mfrow = c(1,1));
  verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                     
                     abs(geneTraitSignificance[moduleGenes, 1]),
                     xlab = paste("Module Membership in", module, "module"),
                     ylab = "Gene significance for MC1R",
                     main = paste("Module membership vs. gene significance\n"),
                     cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col ="blue")
  #cor=0.66, p=6.4e-12
  
  names(datExprnormwoL26)[moduleColors=="skyblue"]
  #[1] "ACOX2"        "AMIGO3"       "APBA2"        "ATP6V1C2"     "CALB1"        "CD99L2"      
  [7] "CDH18"        "CDK15"        "CPE"          "CUNH15orf62"  "DDC"          "EMILIN3"     
  [13] "FOXD3"        "FZD4"         "GDPD4"        "GFOD2"        "GJA5"         "GNG2"        
  [19] "GPER1"        "GPR143"       "HOXA9"        "IFITM10"      "IGSF11"       "IREB2"       
  [25] "KCND2"        "KIT"          "KLHL32"       "LOC104357024" "LOC104357634" "LOC104366696"
  [31] "LOC104368820" "LOC104369395" "LOC116958914" "LOC116960293" "LOC116960306" "LOC116960911"
  [37] "LOC116961354" "LOC116962307" "LOC116962430" "LOC116963363" "LOC116964843" "LOC116965663"
  [43] "LOC122152844" "LOC122153475" "LOC122153970" "LOC122154150" "LOC122154315" "MC1R"        
  [49] "MESD"         "MFSD12"       "MLANA"        "MTMR2"        "MYOM1"        "NEURL1"      
  [55] "PAPSS1"       "PLPPR1"       "PMEL"         "PMS1"         "PSD2"         "PTPRT"       
  [61] "QPCT"         "RAB38"        "RAB3C"        "RAPGEF4"      "RASL10B"      "RASSF2"      
  [67] "RETSAT"       "RPS6KA2"      "RTN1"         "SEMA6D"       "SLC45A2"      "SLC6A17"     
  [73] "SLC6A4"       "SNAP25"       "SOSTDC1"      "SOX10"        "STAC2"        "SYBU"        
  [79] "SYNGR3"       "TAC3"         "TBXA2R"       "TSPAN10"      "TYR"          "VAT1L"       
  [85] "VSTM2L"   
  
  
  module = "darkolivegreen"
  column = match(module, modNames);
  moduleGenes = moduleColors==module;
  sizeGrWindow(7, 7);
  par(mfrow = c(1,1));
  verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                     
                     abs(geneTraitSignificance[moduleGenes, 1]),
                     xlab = paste("Module Membership in", module, "module"),
                     ylab = "Gene significance for body weight",
                     main = paste("Module membership vs. gene significance\n"),
                     cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col =module)
  #cor=0.39, p=0.017
  
  names(datExprnormwoL26)
  names(datExprnormwoL26)[moduleColors=="darkolivegreen"]
  #[1] "ADD2"         "AMPD1"        "ANK1"         "ART4"         "CUNH15orf48"  "DMTN"         "GP1BB"       
  [8] "GP9"          "LOC104355943" "LOC104358558" "LOC104359698" "LOC104360120" "LOC104360184" "LOC104368414"
  [15] "LOC104369299" "LOC104369464" "LOC116959343" "LOC116961035" "LOC116961333" "LOC116962070" "LOC116963251"
  [22] "LOC116963252" "LOC116963855" "LOC116965363" "LOC122152617" "LOC122153234" "LOC122153235" "LOC122154907"
  [29] "NOS2"         "RFESD"        "RHAG"         "RLBP1"        "SLC46A3"      "SLC4A1"       "TAL1"        
  [36] "TESPA1"       "WDR72"   
  
}

#Gene relationship to modules and traits=====================================================================================
##Luis function=====================================================================================
### Module association with traits#########
{
  {#MC1R
  # Correlative approaches:
  {
    # Using pearson MC1R
    results <- data.frame(matrix(nrow = ncol(MEs), ncol = 7))
    for(i in 1:ncol(MEs)){
      test.i <- stats::cor.test(MEs[,i], allTraitsmwoL26[,1],method="pearson", exact= F)
      results[i,] <- c(colnames(MEs)[i], round(test.i$estimate,3), round(test.i$conf.int,3), round(test.i$statistic,3), test.i$parameter, round(test.i$p.value, 5))
         }
    colnames(results)<-c("Module","Pearon r", "Lower IC", "Upper IC", "t-value", "df", "P-value")
    View(results)
    write.table(results,
                file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/for_publi/pearsoncorr_MC1R_modulep7_step.txt")
    
    # Using Spearman MC1R
    { 
      resultssp <- data.frame(matrix(nrow = ncol(MEs), ncol = 4))
      for(i in 1:ncol(MEs)){
        test.i <- stats::cor.test(MEs[,i], allTraitsmwoL26[,1],method="spearman", exact= F)
        resultssp[i,] <- c(colnames(MEs)[i], round(test.i$estimate,3), round(test.i$statistic,3), round(test.i$p.value, 5))
          }
      colnames(resultssp)<-c("Module","Rho",  "W", "P-value")
    
    
    View(resultssp)
    write.table(resultssp,
                file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/for_publi/spearmancorr_MC1R_modulep7_step.txt")
    #same results coming out skyblue and darkolivegreen
     }
  
  # Mean differences
  {install.packages("effsize")
  }
  #library(effsize)
  # or Luis funciton
  cohen.d <- function(group1, group2, means = NULL, format = "Long"){
    n1 <- length(group1)
    n2 <- length(group2)
    var1 <- var(group1)
    var2 <- var(group2)
    
    num <- (n2-1)*var2 + (n1-1)*var1
    den <- n1 + n2 - 2
    Spooled <- sqrt(num/den)
    
    if(is.null(means)){
      m1 <- mean(group1)
      m2 <- mean(group2)
    } else {
      m1 <- means[1]
      m2 <- means[2]
    }
    d = (m2-m1)/Spooled
    d.95 = 1.96*sqrt(((n1+n2-1)/(n1+n2-3))*((4/(n1+n2))*(1+d^2/8)))
    
    d.unb <- d*(1-(3/(4*(n1+n2-2)-1)))
    d.unb.95 = 1.96*sqrt(((n1+n2)/(n1*n2))+((d^2)/(2*(n1+n2-2))))
    
    if(format == "Long"){
      print(paste("d =", round(d,3), ", 95%CI =", round(d.95,3)))
      print(paste("d unbiased =", round(d.unb,3), ", 95%CI =", round(d.unb.95,3)))  
    } else {
      print(d.unb)  
    }
  }  
  {
    #MEskyblue
    resultsmd <- data.frame(matrix(nrow = ncol(MEs), ncol = 7))
    resultsmd
    
   
    
    plot((MEs$MEskyblue) ~ as.factor(allTraitsmwoL26$V126I))
    
    Model.MEskyblue <- t.test((MEs$MEskyblue) ~ as.factor(allTraitsmwoL26$V126I), var.equal = T)
    Model.MEskyblue
    # Two Sample t-test
    
    data:  (MEs$MEskyblue) by as.factor(allTraitsmwoL26$V126I)
    t = 3.6562, df = 30, p-value = 0.000973
    alternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0
    95 percent confidence interval:
      0.08820971 0.31145800
    sample estimates:
      mean in group 1 mean in group 2 
    0.1186514      -0.0811825 
    
   
    
    effect.sizeskyblue <- cohen.d((MEs$MEskyblue)[allTraitsmwoL26$V126I==1],(MEs$MEskyblue)[allTraitsmwoL26$V126I==2])
    effect.sizeskyblue
    #[1] "d = -1.316 , 95%CI = 0.79"
   # [1] "d unbiased = -1.283 , 95%CI = 0.78"
    
    # The standard deviation of the effect size is of critical importance, since it indicates how much uncertainty is included in the measurement. A standard deviation that is too large will make the measurement nearly meaningless. 
    #Cohen's d is defined as the difference between two means divided by a standard deviation for the data.
    #Cohen suggested that d = 0.2 = 50% be considered a “small” effect size = not interesting, 0.5=69% represents a “medium” effect size and 0.8 = 79% a “large” effect size (visible difference between two means with the eyes), 1.4 = 92% of control group below the mean of experimental group. This means that if the difference between two groups” means is less than 0.2 standard deviations, the difference is negligible, even if it is statistically significant.
    #Cohen’s d measures the size of the difference between two groups while Pearson’s r measures the strength of the relationship between two variables
    #While a p-value can tell you if there is an effect, it won’t tell you how large that effect is. d the bigger the better
    
    resultsmd[1,] <- c("MEskyblue", -1.316 , -1.316-0.79, -1.316+0.79, round(Model.MEskyblue$statistic,2),
                       Model.MEskyblue$parameter, round(Model.MEskyblue$p.value,5))
    resultsmd[1,]
    #     X1        X2        X3       X4   X5 X6      X7
    #  1 MEskyblue -1.316 -2.106 -0.526 3.66 30 0.00097
    
    
    
    # MEdarkolivegreen
    plot(MEs$MEdarkolivegreen ~as.factor(allTraitsmwoL26$V126I))
    #Erreur dans plot.new() : figure margins too large
    #De plus : Message d'avis :
    #Dans log(MEswoL26$MEdarkolivegreen) : Production de NaN
    par("mar") 
    #[1] 5.1 4.1 4.1 2.1
   # par(mar=c(3,3,3,2))
   # par(mfrow=c(1,1))
    
  #  plot(MEs0woL26$MEdarkolivegreen ~as.factor(allTraitsmwoL26$V126I)) #ok not so different between MC1R 
   # par(mar=c(5.1 ,4.1 ,4.1 ,2.1))
    
    Model.MEdarkolivegreen <- t.test(MEs$MEdarkolivegreen ~ as.factor(allTraitsmwoL26$V126I), var.equal = T)
    Model.MEdarkolivegreen
    
    # Two Sample t-test
    
   # data:  MEs$MEdarkolivegreen by as.factor(allTraitsmwoL26$V126I)
    t = 2.5701, df = 30, p-value = 0.01538
    alternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0
    95 percent confidence interval:
      0.03139894 0.27439471
    sample estimates:
      mean in group 1 mean in group 2 
    0.09078249     -0.06211434
    
     
    effect.size41 <- cohen.d(MEs$MEdarkolivegreen[allTraitsmwoL26$V126I==1],MEs$MEdarkolivegreen[allTraitsmwoL26$V126I==2])
    effect.size41
    #Cohen's d
    #[1] "d = -0.925 , 95%CI = 0.754"
    #[1] "d unbiased = -0.902 , 95%CI = 0.743"
    
    resultsmd[2,] <- c("MEdarkolivegreen", -0.925, -0.925-0.754, -0.925+0.754, round(Model.MEdarkolivegreen$statistic,2),
                       Model.MEdarkolivegreen$parameter, round(Model.MEdarkolivegreen$p.value,5))
    
    resultsmd[2,]
    colnames(resultsmd) <- c("Module", "Cohen's d", "Lower 95%CI", "Upper 95%CI", "Student t", 
                             "ddf", "P-value") 
    resultsmd
    #              Module Cohen's d Lower 95%CI Upper 95%CI Student t  ddf P-value
    1         MEskyblue    -1.316      -2.106      -0.526      3.66   30 0.00097
    2  MEdarkolivegreen    -0.925      -1.679      -0.171      2.57   30 0.01538
  }   
  }
  ###Gene relationship to modules#########################

####MC1RDefine variable weight containing the weight column of datTrait#######
  MC1R = as.data.frame(allTraitsmwoL26$V126I);
  names(MC1R) = "V126I"
  # names (colors) of the modules
  modNames = substring(names(MEs), 3)
  modNames
  # [1] "darkolivegreen", "skyblue" "grey60" 
  
  { #use spearman
    geneModuleMembership = as.data.frame(cor(datExprnormwoL26, MEs, use = "p", method = "spearman"));
    MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
     
    names(geneModuleMembership) = paste("MM", modNames, sep="");
    names(MMPvalue) = paste("p.MM", modNames, sep="");
    
    #geneTraitSignificance = as.data.frame(cor(datExprnormwoL26, MC1R, use = "p"));
    # geneTraitDifferences
    {
      geneTraitDifferences <- c()
      for(i in 1:ncol(datExprnormwoL26)){
        x <- datExprnormwoL26[,i][which(allTraitsmwoL26$V126I == 1)]
        y <- datExprnormwoL26[,i][which(allTraitsmwoL26$V126I == 2)]
        cohensD <- cohen.d(x, y, format = "Short")
        geneTraitDifferences <- c(geneTraitDifferences, cohensD)
      }
      geneTraitSignificance <- as.data.frame(geneTraitDifferences)
      dim(geneTraitSignificance)
      colnames(geneTraitSignificance)<-c("cohen.d")
      rownames(geneTraitSignificance)<-colnames(datExprnormwoL26)
      geneTraitSignificance
    }
#### Intramodular analysis########
    {
      modNames # "darkolivegreen", "skyblue" "grey60" 
      results <- data.frame(matrix(nrow = length(modNames), ncol = 7))
      results.Pearson <- data.frame(matrix(nrow = length(modNames), ncol = 7))
      
      # Using Pearson
      for(i in 1:length(modNames)){
        moduleGenes = mergedColors == modNames[i]
        test.i <- stats::cor.test(abs(geneModuleMembership[moduleGenes, match(modNames[i], modNames)]),abs(geneTraitSignificance[moduleGenes, 1]))
        results.Pearson[i,] <- c(modNames[i], round(test.i$estimate,3), round(test.i$conf.int,3), round(test.i$statistic,3), test.i$parameter, round(test.i$p.value, 5))
              }
      colnames(results.Pearson)<-c("Module","Pearson r", "Lower IC", "Upper IC", "t-value", "df", "P-value")
      results.Pearson
      write.table(results.Pearson,
                  file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/for_publi/intramodulargene_Pearson_corr_woL26MC1Rp7_step.txt")
      
    }     
  }
      # Using Spearman
      # Confidence interval:
      {
      #install.packages(RVAideMemoire, type='source')
        install.packages("~/Documents/R/RVAideMemoire_0.9-83-7-3.tar", type='source', repos = NULL)
      library(RVAideMemoire)
       }
      results.Spearman <- data.frame(matrix(nrow = length(modNames), ncol = 6))
      for(i in 1:length(modNames)){
        moduleGenes = mergedColors == modNames[i]
        test.i <- stats::cor.test(abs(geneModuleMembership[moduleGenes, match(modNames[i], modNames)]),abs(geneTraitSignificance[moduleGenes, 1]), method = "spearman", exact =F)
        cis <-     spearman.ci(abs(geneModuleMembership[moduleGenes, match(modNames[i], modNames)]),abs(geneTraitSignificance[moduleGenes, 1]))$conf.int
        results.Spearman[i,] <- c(modNames[i], round(test.i$estimate,3),round(cis[1],3),round(cis[2],4), round(test.i$statistic,3), round(test.i$p.value, 5))
        #results.Spearman[i,] <- c(modNames[i], round(test.i$estimate,3),round(test.i$statistic,3), round(test.i$p.value, 5))
          }
    colnames(results.Spearman)<-c("Module","Rho",  "Lower IC", "Upper IC", "S", "P-value")
    #  colnames(results.Spearman )<-c("Module","Rho",  "S", "P-value")
      
      results.Spearman 
      write.table(results.Spearman,
                  file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/for_publi/intramodular_Spearman_corr_woL26powerMC1R_P7_step.txt")
      
  }
  
      
      
##### Module skyblue######
      {
        module = "skyblue"
        column = match(module, modNames);
        moduleGenes = mergedColors==module;moduleGenes
        table(moduleGenes) # 85
          # text(dist ~speed, labels=rownames(geneModuleMembership)[moduleGenes][skyblue.genes],data=cars, cex=0.9, font=2)
        
###### Annotation of the most relevant genes:#############
        sizeGrWindow(7, 7);
        par(mfrow = c(1,1));
        verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                           abs(geneTraitSignificance[moduleGenes, 1]),
                           xlab = paste("Module Membership in", module, "module"),
                           ylab = "Gene significance for MC1R genotype",
                           #main = paste("Module membership vs. gene significance\n"),
                           cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = "blue")
        
        
        
          cut.offs<- c(quantile(abs(geneModuleMembership[moduleGenes, column]), c(0.9)),
                       quantile(abs(geneTraitSignificance[moduleGenes, 1]), c(0.9)))
          abline(v=cut.offs[1])
          abline(h=cut.offs[2])
          skyblue.genes <- which(abs(geneModuleMembership[moduleGenes, column]) >= cut.offs[1] |
                                abs(geneTraitSignificance[moduleGenes, 1]) >= cut.offs[2])
          
          skyblue.genes <- data.frame(cbind(gene = rownames(geneModuleMembership)[moduleGenes][skyblue.genes],
                                         ModuleMembership = geneModuleMembership[moduleGenes,][skyblue.genes,"MMskyblue"],
                                         GeneSignificance = geneTraitSignificance[moduleGenes,][skyblue.genes]))
         # View(merge(skyblue.genes, Functional.Annotation, by.x ="gene", by.y = "GeneID2"))
          write.table(skyblue.genes,
                      file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/for_publi/skyblue_genes_MM_GS_woL26MC1R_p7_st.txt")
         
         #try to get a figure with genes name
          skyblue.genes.abs<-cbind(skyblue.genes$gene, abs(as.numeric(skyblue.genes$ModuleMembership)), abs(as.numeric(skyblue.genes$GeneSignificance)))
          colnames(skyblue.genes.abs)<-c("Gene", "ModuleMembership", "MC1RSignificance")
          head(skyblue.genes.abs)
          skyblue.genes.abs<-as.data.frame(skyblue.genes.abs)
          plot(MC1RSignificance  ~ ModuleMembership, data=skyblue.genes.abs,
                             xlab = paste("Module Membership in", module, "module"),
                             ylab = "Gene significance for MC1R genotype",
                             main = paste("Module membership vs. gene significance\n"),
                             cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = "blue")
           text(MC1RSignificance  ~ ModuleMembership,
                 labels=as.character(Gene),  data=skyblue.genes.abs, cex=0.9, font=2)
          
               
        }
        
        {#to get all genes
          cut.offs1<- c(quantile(abs(geneModuleMembership[moduleGenes, column]), c(0.0)),
                       quantile(abs(geneTraitSignificance[moduleGenes, 1]), c(0.0)))
          abline(v=cut.offs1[1])
          abline(h=cut.offs1[2])
          skyblue.genes <- which(abs(geneModuleMembership[moduleGenes, column]) >= cut.offs1[1] |
                                   abs(geneTraitSignificance[moduleGenes, 1]) >= cut.offs1[2])
          
          skyblue.genes <- data.frame(cbind(gene = rownames(geneModuleMembership)[moduleGenes][skyblue.genes],
                                            ModuleMembership = geneModuleMembership[moduleGenes,][skyblue.genes,"MMskyblue"],
                                            GeneSignificance = geneTraitSignificance[moduleGenes,][skyblue.genes]))
          # View(merge(skyblue.genes, Functional.Annotation, by.x ="gene", by.y = "GeneID2"))
          write.table(skyblue.genes,
                      file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/for_publi/skyblue_allgenes_MM_GS_woL26MC1R_p7_st.txt")
          
        }
      }
#### Module darkolivegreen#######
      {
        module = "darkolivegreen"
        column = match(module, modNames);
        moduleGenes = mergedColors==module;
        table(moduleGenes) # 131
        sizeGrWindow(7, 7);
        par(mfrow = c(1,1));
        verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                           abs(geneTraitSignificance[moduleGenes, 1]),
                           xlab = paste("Module Membership in", module, "module"),
                           ylab = "Gene significance for dispersal",
                           main = paste("Module membership vs. gene significance\n"),
                           cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
        #corr=0.44, p=0.0064
###### Annotation of the most relevant genes:######
        {
          cut.offs<- c(quantile(abs(geneModuleMembership[moduleGenes, column]), c(0.9)),
                       quantile(abs(geneTraitSignificance[moduleGenes, 1]), c(0.9)))
          abline(v=cut.offs[1])
          abline(h=cut.offs[2])
          
          darkolivegreen.genes <- which(abs(geneModuleMembership[moduleGenes, column]) >= cut.offs[1] |
                                abs(geneTraitSignificance[moduleGenes, 1]) >= cut.offs[2])
          
          darkolivegreen.genes <- data.frame(cbind(gene = rownames(geneModuleMembership)[moduleGenes][darkolivegreen.genes],
                                         ModuleMembership = geneModuleMembership[moduleGenes,][darkolivegreen.genes,"MMdarkolivegreen"],
                                         GeneSignificance = geneTraitSignificance[moduleGenes,][darkolivegreen.genes]))
          
          
             
          
          
          
        #  View(merge(darkolivegreen.genes, Functional.Annotation, by.x ="gene", by.y = "GeneID2"))
          write.table( darkolivegreen.genes,
                      file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/darkolivegreen.genes_MM_GS_woL26MC1R_p7_st.txt")
          
        }
        #all genes
        {
          cut.offs1<- c(quantile(abs(geneModuleMembership[moduleGenes, column]), c(0.0)),
                       quantile(abs(geneTraitSignificance[moduleGenes, 1]), c(0.0)))
          abline(v=cut.offs1[1])
          abline(h=cut.offs1[2])
          
          darkolivegreen.genes <- which(abs(geneModuleMembership[moduleGenes, column]) >= cut.offs1[1] |
                                          abs(geneTraitSignificance[moduleGenes, 1]) >= cut.offs1[2])
          
          darkolivegreen.genes <- data.frame(cbind(gene = rownames(geneModuleMembership)[moduleGenes][darkolivegreen.genes],
                                                   ModuleMembership = geneModuleMembership[moduleGenes,][darkolivegreen.genes,"MMdarkolivegreen"],
                                                   GeneSignificance = geneTraitSignificance[moduleGenes,][darkolivegreen.genes]))
          
          
          
          
          
          
          #  View(merge(darkolivegreen.genes, Functional.Annotation, by.x ="gene", by.y = "GeneID2"))
          write.table( darkolivegreen.genes,
                       file = "/Users/aroulinn/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/GeneNetwork/DEgenesMC1R/darkolivegreen.allgenes_MM_GS_woL26MC1R_p7_st.txt")
          
        }
      }
      
 ####################################################################################### 
 ###############Enrichment plot with gprofiler
{ 
install.packages("gprofiler2")  

library(gprofiler2)

library(ggplot2)

#load a file with the DE genes names and thier ENS human name done with g-profiler
DEgenes_ENSname_foldchange_padj <- read.csv("~/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/new2021_December_to_February_2022/DEgenes_ENSname_foldchange_padj.csv", sep=",")
View(DEgenes_ENSname_foldchange_padj)

names(DEgenes_ENSname_foldchange_padj)

#get a picture
gostres <- gost(query = DEgenes_ENSname_foldchange_padj$converted_alias,
         organism = "hsapiens")
# The result is a named list where “result” is a data.frame with the enrichment analysis results
# and “meta” containing a named list with all the metadata for the query.
head(gostres$result)
#picture
p <- gostplot(gostres, capped = FALSE, interactive = FALSE)
p
gostplot(gostres, capped = TRUE, interactive = TRUE)
}

######GE: #try to do the histogram myself
{
  install.packages("~/Downloads/readxl_1.4.3.tar")
  
  library(readxl)
MC1RwoAgeFeather_allgenes_gProfiler_hsapiens_21_01_2022_a_10_42_15_intersections <- read_excel("~/Documents/sequencing_results/RNAseq/RNAseq2016/Analyses_DE/summary_2021/MC1RwoAgeFeather_allgenes_gProfiler_hsapiens_21-01-2022 à 10-42-15__intersections.xlsx")
 View(MC1RwoAgeFeather_allgenes_gProfiler_hsapiens_21_01_2022_a_10_42_15_intersections)

MC1RDE<- MC1RwoAgeFeather_allgenes_gProfiler_hsapiens_21_01_2022_a_10_42_15_intersections
names(MC1RDE)
MC1RDE2<-MC1RDE[order(MC1RDE$negative_log10_of_adjusted_p_value), ]

ggplot(MC1RDE2, aes(x=adjusted_p_value, y=term_name)) + geom_point(shape=18, color="blue")

ggplot(MC1RDE2, aes(x=adjusted_p_value, y=term_name)) + geom_point(shape=18, color="blue")
}
 #not optimal 
 ##########
# with g-profiler too many categoriesfrom internet GE plot
{ 
BiocManager::install("argparser")
#install.packages("RSQLite")

library(argparser)

library(ggplot2)

# Incoming parameters
argv <- arg_parser('Draw a scatter plot based on the results of the enrichment analysis')
argv <- add_argument(argv, "--enrich", help = "Enrichment result file")
argv <- add_argument(argv, "--ndot", help = "The figure shows the number of pathways", type = 'numeric')
argv <- add_argument(argv, "--title", help = "Graphic title")
argv <- add_argument(argv, "--prefix", help = "Output picture prefix")
argv <- parse_args(argv)
enrich <- argv$enrich
ndot <- argv$ndot
title <- argv$title
prefix <- argv$prefix

#enrich <- read.delim(enrich, header = T, sep = '\t')

names(MC1RDE2)

MC1RDE2$padj<-MC1RDE2$adjusted_p_value

enrich<-MC1RDE2
enrich <- na.omit(enrich)
enrich<-as.data.frame(enrich)
names(enrich)

# Sort by padj and select ndot pathway drawings
#enrich <- enrich[order(enrich$padj, decreasing = F), ]
#if(nrow(enrich)>ndot){enrich <- enrich[1:ndot, ]}

#Calculate GeneRatio
#ratio <- matrix(as.numeric(unlist(strsplit(as.vector(enrich$GeneRatio),"/"))), ncol = 2, byrow = TRUE)
#enrich$GeneRatio <- ratio[,1]/ratio[,2]
enrich$GeneRatio<-enrich$intersection_size/enrich$term_size
#Drawing enrichment scatter plot
p <- ggplot(enrich, aes(x = GeneRatio, y = term_name, colour = padj, size = intersection_size))
p <- p + geom_point()
p <- p + scale_colour_gradientn(colours = rainbow(4), guide = "colourbar") + expand_limits(color = seq(0,1,by = 0.25))
p <- p + ggtitle(title) + xlab("GeneRatio") +ylab("")
p <- p + theme_bw() + theme(axis.text = element_text(color = "black", size = 10))
p <- p + theme(panel.border = element_rect(colour = "black"))
p <- p + theme(plot.title = element_text(vjust = 1), legend.key = element_blank())
plot (p, width = 8, height = 6, type = 'cairo-png')
#ggsave(paste(prefix, '.dot.png', sep = ''),

}
#### ok but too many pathway, it should be simplified

#Figure Gene enrichment#################################################################################################
###try with the cytoscape results on biological process
#the one for the figure to keep
{ 
BiocManager::install("argparser")
#install.packages("RSQLite")

library(argparser)

library(ggplot2)

# Incoming parameters
argv <- arg_parser('Draw a scatter plot based on the results of the enrichment analysis')
argv <- add_argument(argv, "--enrich", help = "Enrichment result file")
argv <- add_argument(argv, "--ndot", help = "The figure shows the number of pathways", type = 'numeric')
argv <- add_argument(argv, "--title", help = "Graphic title")
argv <- add_argument(argv, "--prefix", help = "Output picture prefix")
argv <- parse_args(argv)
enrich <- argv$enrich
ndot <- argv$ndot
title <- argv$title
prefix <- argv$prefix

#enrich <- read.delim(enrich, header = T, sep = '\t')

MC1R_allgeneswoFeather_KallistoStar_Cytoscapeenrichment <- read_excel("~/Documents/sequencing_results/RNAseq/RNAseq2016/GeneEnrichment_Analyses/MC1R_allgeneswoFeather_KallistoStar_Cytoscapeenrichment_2022_02_08.xlsx")
View(MC1R_allgeneswoFeather_KallistoStar_Cytoscapeenrichment)     
MC1REnrich<-MC1R_allgeneswoFeather_KallistoStar_Cytoscapeenrichment
names(MC1REnrich)
#[1] "Description"        "FDR_value"          "Genes"              "background_genesNB" "genesNb"   
MC1REnrich$padj<-MC1REnrich$FDR_value

enrich<-MC1REnrich
enrich <- na.omit(enrich)
enrich<-as.data.frame(enrich)
names(enrich)

# Sort by padj and select ndot pathway drawings
enrich <- enrich[order(enrich$padj, decreasing = F), ]

#if(nrow(enrich)>ndot){enrich <- enrich[1:ndot, ]}
enrich
#Calculate GeneRatio
#ratio <- matrix(as.numeric(unlist(strsplit(as.vector(enrich$GeneRatio),"/"))), ncol = 2, byrow = TRUE)
#enrich$GeneRatio <- ratio[,1]/ratio[,2]
enrich$GeneRatio<-enrich$genesNb/enrich$background_genesNB
enrich$GeneRatio

enrich$Description <- factor(enrich$Description, levels = rev(enrich$Description[order(enrich$padj)]))

#Drawing enrichment scatter plot
p <- ggplot(enrich, aes(x = GeneRatio, y = Description, colour = padj, size = genesNb))
p <- p + geom_point()
#p <- p + scale_colour_gradientn(colours = rainbow(4), guide = "colourbar") + expand_limits(color = seq(0,1,by = 0.25))
p <- p +  xlab("Gene ratio") +ylab("")
p <- p + theme_bw() + theme(axis.text = element_text(color = "black", size = 10))
p <- p + theme(panel.border = element_rect(colour = "black"))
p <- p + theme(plot.title = element_text(vjust = 1), legend.key = element_blank())
plot (p, width = 8, height = 6, type = 'cairo-png')
#ggsave(paste(prefix, '.dot.png', sep = ''),
}



     